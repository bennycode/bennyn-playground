// Generated by CoffeeScript 1.6.3
(function() {
  var Registration, RequestHandler, User, UserEmailAddress, UserPassword, UserProperty, benny, pw,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Array.prototype.present = function() {
    return this.length > 0;
  };

  UserProperty = (function() {
    function UserProperty(value) {
      this.value = value != null ? value : '';
      this.guidance = {
        level: 'error',
        title: 'guide.title',
        explanation: 'guide.explanation'
      };
    }

    UserProperty.prototype.isValid = function() {
      return this.value.length > 0;
    };

    return UserProperty;

  })();

  UserPassword = (function(_super) {
    __extends(UserPassword, _super);

    function UserPassword(value) {
      this.value = value;
      this.isValid = __bind(this.isValid, this);
    }

    UserPassword.prototype.isValid = function() {
      return this.value.length > 5;
    };

    return UserPassword;

  })(UserProperty);

  UserEmailAddress = (function(_super) {
    var emailPattern;

    __extends(UserEmailAddress, _super);

    emailPattern = /^([\w.-]+)@([\w.-]+)\.([a-zA-Z.]{2,6})$/i;

    function UserEmailAddress(value) {
      this.value = value;
    }

    UserEmailAddress.prototype.isValid = function() {
      if (this.value.match(emailPattern)) {
        return true;
      } else {
        return false;
      }
    };

    return UserEmailAddress;

  })(UserProperty);

  User = (function() {
    function User(name, email, password) {
      this.getRegistrationPayload = __bind(this.getRegistrationPayload, this);
      this.name = new UserProperty(name);
      this.email = new UserEmailAddress(email);
      this.password = new UserPassword(password);
    }

    User.prototype.optional = {
      accent: [],
      picture: [],
      phone: "",
      phone_code: ""
    };

    User.prototype.getRegistrationPayload = function() {
      var key, payload;
      payload = {};
      for (key in this) {
        if (this[key] instanceof UserProperty && this[key].isValid()) {
          payload[key] = this[key].value;
        }
      }
      return JSON.stringify(payload);
    };

    User.prototype.hasValidRegistrationData = function() {
      if (this.name.isValid() && this.email.isValid() && this.password.isValid()) {
        return true;
      } else {
        return false;
      }
    };

    return User;

  })();

  /*
    https://docs.z-infra.com/dev-device-api/latest/reference/users.html
  */


  Registration = (function() {
    var host, url, user;
    host = 'https://armada-test.z-infra.com';
    url = {
      access: host + '/access',
      login: host + '/login',
      register: host + '/register'
    };
    user = new User("", "", "");
    return {
      init: function() {
        return $('#registration-form-name').on('blur', function() {
          user.name.value = $(this).val();
          console.log("Username: " + user.name.value + " | valid: " + (user.name.isValid()));
          if (!user.name.isValid()) {
            return alert("username invalid");
          }
        });
      },
      register: function(user) {
        if (user.hasValidRegistrationData) {
          return RequestHandler.postData(url.register, user.getRegistrationPayload(), function(data, textStatus, jqXHR) {
            return alert(JSON.stringify(data));
          }, function(data, textStatus, jqXHR) {
            return alert(JSON.stringify(data));
          });
        }
      }
    };
  })();

  RequestHandler = (function() {
    return {
      postData: function(url, data, onSuccess, onError) {
        var payload;
        payload = data;
        return $.ajax(url, {
          type: 'POST',
          crossDomain: true,
          contentType: 'application/json; charset=utf-8',
          dataType: 'json',
          data: payload,
          error: onError,
          success: onSuccess
        });
      }
    };
  })();

  pw = new UserPassword("abc123");

  benny = new User('Benny', 'benny@wearezeta.com', 'abc123');

  Registration.init();

  window.Foo = (function() {
    function Foo() {}

    Foo.foo = 'blah';

    console.log(Foo.foo);

    return Foo;

  })();

}).call(this);

/*
//@ sourceMappingURL=app.map
*/
