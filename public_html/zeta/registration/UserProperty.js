// Generated by CoffeeScript 1.6.3
(function() {
  var UserEmailAddress, UserPassword, UserProperty,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  namespace({
    Zeta: {
      Registration: UserProperty = (function() {
        function UserProperty(value) {
          this.value = value != null ? value : '';
          this.guidance = {
            level: 'error',
            title: 'guide.title',
            explanation: 'guide.explanation'
          };
        }

        UserProperty.prototype.isValid = function() {
          return this.value.length > 0;
        };

        return UserProperty;

      })()
    }
  });

  namespace({
    Zeta: {
      Registration: UserPassword = (function(_super) {
        __extends(UserPassword, _super);

        function UserPassword(value) {
          var _this = this;
          this.value = value;
          ({
            isValid: function() {
              return _this.value.length > 5;
            }
          });
        }

        return UserPassword;

      })(UserProperty)
    }
  });

  namespace({
    Zeta: {
      Registration: UserEmailAddress = (function(_super) {
        var emailPattern;

        __extends(UserEmailAddress, _super);

        emailPattern = /^([\w.-]+)@([\w.-]+)\.([a-zA-Z.]{2,6})$/i;

        function UserEmailAddress(value) {
          this.value = value;
        }

        UserEmailAddress.prototype.isValid = function() {
          if (this.value.match(emailPattern)) {
            return true;
          } else {
            return false;
          }
        };

        return UserEmailAddress;

      })(UserProperty)
    }
  });

}).call(this);

/*
//@ sourceMappingURL=UserProperty.map
*/
